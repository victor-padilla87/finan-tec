
package Vistas;

import Conexion.Conexionmysql;
import controlador.Ctr_RegistroVenta;
import controlador.VentaPdf;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVenta;
import modelo.Cliente;
import modelo.DetalleVenta;

/**
 *
 * @author User WOM (EIASA)
 */
public class InterFacturacion extends javax.swing.JInternalFrame {

    // modelo para los datos
    private DefaultTableModel modeloDatosProductos;

    // lista para el detalle de venta de los productos
    ArrayList<DetalleVenta> ListaProductos = new ArrayList<>();
    private DetalleVenta producto;

    private int idcliente = 0;

    private int idproducto = 0;
    private String nombre = "";
    private int existencia = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIva = 0;

    private int cantidad = 0;
    private double subtotal = 0.0;
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalApagar = 0.0;

    // variables para realizar calulos globales
    private double subtotalglobal = 0.0;
    private double descuentoglobal = 0.0;
    private double ivaglobal = 0.0;
    private double totalapagarglobal = 0.0;
    // fin de variables globales

    private int auxIdDetalle = 1;

    int ArrayList = 0;
    private Cliente clienteSeleccionado;

    /**
     * Creates new form InterFacturacion
     */
    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");

        // cargar los clientes en la vista
        this.CargarComboClientes();
        // cargar los productos en la vista
        this.CargarComboProductos();

        this.inicializarTablaProductos();

        // se desabilitan el campo txt_efectivo y el jButtom_calcular_cambio hasta que se agreguen productos
        txt_efectivo.setEnabled(false);
        jButton_calcular_cambio.setEnabled(false);

        txt_subtotal.setText("0.0");
        txt_descuento.setText("0.0");
        txt_iva.setText("0.0");
        txt_total_apagar.setText("0.0");

        // metodo para insertar imagen por medio de codigo
        ImageIcon wallpaper = new ImageIcon("src/imagenes/fondo3.jpg");
        Icon Icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(Icono);
        this.repaint();

    }

    // Método para inicializar la tabla de productos
    private void inicializarTablaProductos() {
        modeloDatosProductos = new DefaultTableModel();

        // Añadir columnas a la tabla
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("Pre.Unitario");
        modeloDatosProductos.addColumn("Subtotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("Iva");
        modeloDatosProductos.addColumn("Total Apagar");
        modeloDatosProductos.addColumn("Accion");

        this.jTable_productos.setModel(modeloDatosProductos);
    }

/// Método para presentar el detalle de los productos en la tabla
    private void listaTablaProductos() {
        this.modeloDatosProductos.setRowCount(0); // Limpiar la tabla antes de agregar nuevas filas
        for (int i = 0; i < ListaProductos.size(); i++) {
            this.modeloDatosProductos.addRow(new Object[]{
                i + 1, // N
                ListaProductos.get(i).getNombre_Producto(), // Nombre del producto
                ListaProductos.get(i).getCantidad(), // Cantidad
                ListaProductos.get(i).getPrecioUnitario(), // Precio unitario
                ListaProductos.get(i).getSubtotal(), // Subtotal
                ListaProductos.get(i).getDescuento(), // Descuento
                ListaProductos.get(i).getIva(), // IVA
                ListaProductos.get(i).getTotalApagar(), // Total a pagar
                "Eliminar" // Accion
            });
        }

        // Actualizar la tabla
        jTable_productos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_Cliente = new javax.swing.JComboBox<>();
        jComboBox_Producto = new javax.swing.JComboBox<>();
        txt_cliente_buscar = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jButton_buscar_cliente = new javax.swing.JButton();
        jButton_añadir_producto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_descuento = new javax.swing.JTextField();
        txt_iva = new javax.swing.JTextField();
        txt_total_apagar = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        txt_cambio = new javax.swing.JTextField();
        jButton_calcular_cambio = new javax.swing.JButton();
        jButton_registrar_venta = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 204));
        jLabel1.setText("FACTURACION");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto.");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 80, -1));

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 204));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 80, -1));

        jComboBox_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 170, -1));

        jComboBox_Producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_Producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        txt_cliente_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cliente_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(txt_cliente_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 150, -1));

        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidadActionPerformed(evt);
            }
        });
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 60, -1));

        jButton_buscar_cliente.setBackground(new java.awt.Color(0, 255, 255));
        jButton_buscar_cliente.setText("Buscar");
        jButton_buscar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscar_clienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_buscar_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, -1, -1));

        jButton_añadir_producto.setBackground(new java.awt.Color(0, 255, 255));
        jButton_añadir_producto.setText("Añadir Prodcuto");
        jButton_añadir_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_añadir_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_añadir_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, -1, -1));

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 210));

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Subtotal:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Descuento:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Iva:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("TotalApagar:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Efectivo:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Cambio:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        txt_subtotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_subtotal.setEnabled(false);
        jPanel3.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 120, -1));

        txt_descuento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_descuento.setEnabled(false);
        jPanel3.add(txt_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 120, -1));

        txt_iva.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_iva.setEnabled(false);
        jPanel3.add(txt_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 120, -1));

        txt_total_apagar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_total_apagar.setEnabled(false);
        jPanel3.add(txt_total_apagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 120, -1));

        txt_efectivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jPanel3.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 120, -1));

        txt_cambio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_cambio.setEnabled(false);
        jPanel3.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 120, -1));

        jButton_calcular_cambio.setBackground(new java.awt.Color(0, 255, 255));
        jButton_calcular_cambio.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_calcular_cambio.setText("Calcular Cambio");
        jButton_calcular_cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calcular_cambioActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_calcular_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 130, 50));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 380, 230));

        jButton_registrar_venta.setBackground(new java.awt.Color(0, 255, 255));
        jButton_registrar_venta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_registrar_venta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora2.png"))); // NOI18N
        jButton_registrar_venta.setText("Registrar Venta");
        jButton_registrar_venta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_registrar_venta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_registrar_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_registrar_ventaActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_registrar_venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 170, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_cliente_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cliente_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cliente_buscarActionPerformed

    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidadActionPerformed

    private void jButton_buscar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscar_clienteActionPerformed

        // Obtener la cédula ingresada por el usuario desde el campo de texto
        String clienteBuscar = txt_cliente_buscar.getText().trim();

        // Validar que el campo de cédula no esté vacío
        if (clienteBuscar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una cédula.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Establecer conexión a la base de datos
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();

        // Consulta SQL para buscar al cliente por su cédula
        String sql = "SELECT nombre, apellido FROM clientes WHERE cedula = '" + clienteBuscar + "'";

        try {
            // Ejecutar la consulta
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Si el cliente es encontrado
            if (rs.next()) {
                // Mostrar el nombre completo en el ComboBox
                jComboBox_Cliente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            } else {
                // Si no se encuentra el cliente, mostrar mensaje de error
                jComboBox_Cliente.setSelectedItem("Seleccione cliente:");
                JOptionPane.showMessageDialog(this, "¡Cédula incorrecta o no existe!", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Limpiar el campo de búsqueda
            txt_cliente_buscar.setText("");

            // Cerrar la conexión
            cn.close();
        } catch (SQLException e) {
            System.out.println("¡Error al Buscar Cliente!" + e);
            JOptionPane.showMessageDialog(this, "Ocurrió un error al buscar el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton_buscar_clienteActionPerformed

    private void jButton_añadir_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_añadir_productoActionPerformed
        String combo = this.jComboBox_Producto.getSelectedItem().toString();

// Definir el porcentaje de IVA (19% en este caso)
        double porcentaje_iva = 0.19;

// Definir el descuento, si no hay, se puede poner a 0
        double descuento = 0.0;

        if (combo.equalsIgnoreCase("Seleccione Producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un Producto");
        } else {
            // Verificar si el campo de cantidad no está vacío
            if (!txt_cantidad.getText().isEmpty()) {
                // Validar que la cantidad sea un número válido
                boolean validacion = validar(txt_cantidad.getText());

                if (validacion) {
                    int cantidad = Integer.parseInt(txt_cantidad.getText());
                    if (cantidad > 0) {
                        // Obtener los datos del producto seleccionado
                        this.DatosDelProducto();

                        // Verificar que la cantidad ingresada no exceda el stock disponible
                        if (cantidad <= this.cantidad) {

                            // Calcular el subtotal
                            subtotal = precioUnitario * cantidad;

                            // Calcular el descuento (si no hay, será 0)
                            descuento = subtotal * descuento;

                            // Calcular el IVA
                            iva = subtotal * porcentaje_iva;

                            // Calcular el total a pagar
                            totalApagar = subtotal + iva - descuento;

                            // Redondear los valores a 2 decimales
                            subtotal = Math.round(subtotal * 100.0) / 100.0;
                            iva = Math.round(iva * 100.0) / 100.0;
                            descuento = Math.round(descuento * 100.0) / 100.0;
                            totalApagar = Math.round(totalApagar * 100.0) / 100.0;

                            // Crear un nuevo producto (DetalleVenta)
                            producto = new DetalleVenta(
                                    auxIdDetalle, // ID de detalle
                                    1, // ID de la venta (fijo en 1 aquí)
                                    idproducto, // ID del producto
                                    nombre, // Nombre del producto
                                    cantidad, // Cantidad seleccionada
                                    precioUnitario, // Precio unitario del producto
                                    subtotal, // Subtotal calculado
                                    descuento, // Descuento aplicado
                                    iva, // IVA calculado
                                    totalApagar // Total a pagar (incluyendo IVA y descuentos)

                            );

                            // Añadir el producto a la lista de productos
                            ListaProductos.add(producto);
                            //JOptionPane.showMessageDialog(null, "Se agregó el producto");

                            // Incrementar el ID para el próximo producto a añadir
                            auxIdDetalle++;

                            // Limpiar el campo de cantidad
                            txt_cantidad.setText("");

                            // Recargar el combo de productos para reflejar posibles cambios
                            this.CargarComboProductos();
                            this.CalcularTotalApagar();

                            txt_efectivo.setEnabled(true);
                            jButton_calcular_cambio.setEnabled(true);

                        } else {
                            // Mensaje de error si la cantidad ingresada es mayor al stock
                            JOptionPane.showMessageDialog(null, "¡La cantidad ingresada es mayor al stock disponible!");
                        }
                    } else {
                        // Mensaje de error si la cantidad es 0 o negativa
                        JOptionPane.showMessageDialog(null, "¡La cantidad no puede ser cero(0) ni negativa!");
                    }
                } else {
                    // Mensaje de error si la cantidad contiene caracteres no numéricos
                    JOptionPane.showMessageDialog(null, "¡Solo se permiten caracteres numéricos!");
                }
            } else {
                // Mensaje de error si no se ingresó ninguna cantidad
                JOptionPane.showMessageDialog(null, "Ingrese la cantidad de productos");
            }

            // Actualizar la tabla de productos con la nueva lista de productos
            this.listaTablaProductos();
        }

    }//GEN-LAST:event_jButton_añadir_productoActionPerformed

    private void jButton_calcular_cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_calcular_cambioActionPerformed
        if (!txt_efectivo.getText().isEmpty()) {
            // validar que solo se ingresen caracteres numericos
            boolean validacion = validarDouble(txt_efectivo.getText());
            if (validacion == true) {
                // validar que el efectivo sea mayor a cero
                double efc = Double.parseDouble(txt_efectivo.getText().trim());
                double top = Double.parseDouble(txt_total_apagar.getText().trim());

                if (efc < top) {
                    JOptionPane.showMessageDialog(null, "la cantidad ingresa en menor a monto apagar");
                } else {
                    double cambio = (efc - top);
                    double cambi = (double) Math.round(cambio * 100d) / 100;
                    String camb = String.valueOf(cambi);
                    txt_cambio.setText(camb);

                }

            } else {
                JOptionPane.showMessageDialog(null, "solo se permite caracteres numericos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese el monto en efectivo para calcular el cambio");
        }
    }//GEN-LAST:event_jButton_calcular_cambioActionPerformed

    private void jTable_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_productosMouseClicked

        int fila_point = jTable_productos.rowAtPoint(evt.getPoint());
        int columna_point = 0;

        if (fila_point > -1) {
            ArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);
        }
        int option = JOptionPane.showConfirmDialog(null, "¿Eliminar Producto?");
        // opciones de confir dialogo (si = 0; no = 1; canelar = 2; close = -1)

        switch (option) {
            case 0 -> {
                // presione si
                ListaProductos.remove(ArrayList - 1);
                this.CalcularTotalApagar();
                this.listaTablaProductos();
            }
            case 1 -> {
            }
            default -> {
            }
        }
        // se preciono no
        // sea que precione cual quiera de las otroas dos opciones


    }//GEN-LAST:event_jTable_productosMouseClicked

    private void jButton_registrar_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_registrar_ventaActionPerformed

        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        DetalleVenta detalleVenta = new DetalleVenta(auxIdDetalle, 1, idproducto, nombre, cantidad, precioUnitario, subtotal, descuento, iva, totalApagar, 1);
        Ctr_RegistroVenta controlVenta = new Ctr_RegistroVenta();

        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy-MM-dd").format(date);

        if (!jComboBox_Cliente.getSelectedItem().equals("Seleccione Cliente:")) {
            if (!ListaProductos.isEmpty()) {

                // meto para obtener el id del cliente
                this.ObtenerId();
                // registro cabecera de venta
                cabeceraVenta.setIdCabeceraVengta(0);
                cabeceraVenta.getIdCliente(idcliente);
                cabeceraVenta.setValorPagar(Double.parseDouble(txt_total_apagar.getText()));
                cabeceraVenta.setFechaVenta(fechaActual);
                cabeceraVenta.setEstado(1);

                if (controlVenta.guardar(cabeceraVenta, idcliente)){

                    JOptionPane.showMessageDialog(null, "¡Venta Registrada!");

                    // general la factura
                    VentaPdf venta = new VentaPdf();

                    venta.datosCliente(idcliente); // Cargar los datos del cliente
                    venta.generalFacturaPDF();      // Generar el PDF

                    // guardar cabecera
                    for (DetalleVenta elemento : ListaProductos) {
                        detalleVenta.setIdDetalleVenta(0);
                        detalleVenta.setIdCabecerVenta(elemento.getIdCabecerVenta());
                        detalleVenta.setIdProducto(elemento.getIdProducto());
                        detalleVenta.setNombre(elemento.getNombre_Producto());
                        detalleVenta.setCantidad(elemento.getCantidad());
                        detalleVenta.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleVenta.setSubtotal(elemento.getSubtotal());
                        detalleVenta.setDescuento(elemento.getDescuento());
                        detalleVenta.setIva(elemento.getIva());
                        detalleVenta.setTotalApagar(elemento.getTotalApagar());
                        detalleVenta.setEstado(1);

                        if (controlVenta.guardarDetalle(detalleVenta)) {

                            txt_subtotal.setText("0.0");
                            txt_descuento.setText("0.0");
                            txt_iva.setText("0.0");
                            txt_total_apagar.setText("0.0");
                            txt_efectivo.setText("0.0");
                            txt_cambio.setText("0.0");
                            auxIdDetalle = 1;

                            this.CargarComboClientes();
                            this.RestarStockProductos(elemento.getIdProducto(), elemento.getCantidad());

                        } else {

                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "¡No se pudo guardar la cavecera!");
                }

                ListaProductos.clear();
                listaTablaProductos();

            } else {
                JOptionPane.showMessageDialog(null, "¡Selecciones un producto!");
            }

        } else {
            JOptionPane.showMessageDialog(null, "¡Seleccione un cliente!");

        }

    }//GEN-LAST:event_jButton_registrar_ventaActionPerformed

    private void jComboBox_ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_ClienteActionPerformed

    private void jComboBox_ProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_ProductoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_añadir_producto;
    private javax.swing.JButton jButton_buscar_cliente;
    private javax.swing.JButton jButton_calcular_cambio;
    private javax.swing.JButton jButton_registrar_venta;
    private javax.swing.JComboBox<String> jComboBox_Cliente;
    private javax.swing.JComboBox<String> jComboBox_Producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_cliente_buscar;
    private javax.swing.JTextField txt_descuento;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_iva;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_total_apagar;
    // End of variables declaration//GEN-END:variables

// metodo para cargar clientes en el jComboBox_Cliente
    private void CargarComboClientes() {
        // Instancia de la conexión
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        // Consulta SQL
        String sql = "SELECT nombre, apellido FROM clientes";

        try {
            // Prepara la sentencia SQL
            PreparedStatement ps = cn.prepareStatement(sql);
            // Ejecuta la consulta y obtiene los resultados
            ResultSet rs = ps.executeQuery();

            // Limpia el ComboBox antes de llenarlo
            jComboBox_Cliente.removeAllItems();
            jComboBox_Cliente.addItem("Seleccione Cliente:");

            // Recorre los resultados y los agrega al ComboBox
            while (rs.next()) {
                jComboBox_Cliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
        } catch (SQLException e) {
            System.out.println("No se pudieron cargar los clientes" + e);
        } finally {
            // Cierra la conexión
            try {
                if (cn != null && !cn.isClosed()) {
                    cn.close();
                }
            } catch (SQLException ex) {

            }
        }
    }

    // metodo para cargar productos en el jComboBox_Producto
    private void CargarComboProductos() {
        // Instancia de la conexión
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        // Consulta SQL
        String sql = "SELECT nombre FROM productos";

        try {
            // Prepara la sentencia SQL
            PreparedStatement ps = cn.prepareStatement(sql);
            // Ejecuta la consulta y obtiene los resultados
            ResultSet rs = ps.executeQuery();

            // Limpia el ComboBox antes de llenarlo
            jComboBox_Producto.removeAllItems();
            jComboBox_Producto.addItem("Seleccione Producto:");

            // Recorre los resultados y los agrega al ComboBox
            while (rs.next()) {
                jComboBox_Producto.addItem(rs.getString("nombre"));
            }
        } catch (SQLException e) {
            System.out.println("No se pudieron cargar los productos" + e);
        } finally {
            // Cierra la conexión
            try {
                if (cn != null && !cn.isClosed()) {
                    cn.close();
                }
            } catch (SQLException ex) {

            }
        }
    }

    // metodo para validar que se ingre solo caracteres numericos
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // metodo para validar que se ingre solo caracteres numericos
    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // Método para mostrar los datos del producto
    private void DatosDelProducto() {
        try {
            // Corrección de la consulta SQL
            String sql = "SELECT * FROM productos WHERE nombre = '" + this.jComboBox_Producto.getSelectedItem() + "'";

            // Instancia de la conexión
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            // Procesar los resultados
            if (rs.next()) {
                idproducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre");
                cantidad = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio_unitario");
                porcentajeIva = rs.getInt("porcentaje_iva");

                // Calcular el IVA
                this.CalcularIva(precioUnitario, porcentajeIva);
            } else {
                JOptionPane.showMessageDialog(null, "Producto no encontrado");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener los datos del producto: " + e);
        }
    }

    // metodo para calcular el iva
    private double CalcularIva(double precio_unitario, int porcentaje_iva) {
        int p_iva = porcentaje_iva;

        switch (p_iva) {
            case 0 ->
                iva = 0.0;
            case 16 ->
                iva = (precio_unitario * cantidad) * 0.16;
            case 19 ->
                iva = (precio_unitario * cantidad) * 0.19;
            default -> {
            }
        }
        return iva;
    }

    // metodo para calcular el total apagar geberal
    private void CalcularTotalApagar() {

        subtotalglobal = 0;
        descuentoglobal = 0;
        ivaglobal = 0;
        totalapagarglobal = 0;

        for (DetalleVenta elemento : ListaProductos) {
            subtotalglobal += elemento.getSubtotal();
            descuentoglobal += elemento.getDescuento();
            ivaglobal += elemento.getIva();
            totalapagarglobal += elemento.getTotalApagar();

            subtotalglobal = (double) Math.round(subtotalglobal * 100) / 100;
            descuentoglobal = (double) Math.round(descuentoglobal * 100) / 100;
            ivaglobal = (double) Math.round(ivaglobal * 100) / 100;
            totalapagarglobal = (double) Math.round(totalapagarglobal * 100) / 100;

            // enviar datos a la vista
            txt_subtotal.setText(String.valueOf(subtotalglobal));
            txt_descuento.setText(String.valueOf(descuentoglobal));
            txt_iva.setText(String.valueOf(ivaglobal));
            txt_total_apagar.setText(String.valueOf(totalapagarglobal));
        }
    }
    // metodo para obtener el id del cliente

    private void ObtenerId() {
        try {

            String sql = "SELECT idCliente FROM clientes WHERE CONCAT(nombre, ' ', apellido) = ?";

            // Instancia de la conexión
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();

            // Usar PreparedStatement en lugar de concatenar la consulta
            PreparedStatement ps = cn.prepareStatement(sql);
            ps.setString(1, this.jComboBox_Cliente.getSelectedItem().toString());  // Asignar el valor del cliente seleccionado

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                idcliente = rs.getInt("idCliente");  // Obtener el id del cliente
            }
        } catch (SQLException e) {
            System.out.println("No se pudo obtener el id del cliente: " + e);
        }

    }

    private void RestarStockProductos(int id, int cantidad) {
        int existencia = 0;
        try {
            // Instancia de la conexión
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();

            // Consulta para obtener la cantidad actual del producto
            String sql = "SELECT cantidad FROM productos WHERE idProducto = ?";
            PreparedStatement st = cn.prepareStatement(sql);
            st.setInt(1, id);  // Se usa el parámetro 'id' pasado al método

            ResultSet rs = st.executeQuery();
            if (rs.next()) {
                existencia = rs.getInt("cantidad");  // Obtener la columna 'cantidad'
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al obtener la cantidad del producto: " + e.getMessage());
        }

        try {
            // Abrimos la conexión de nuevo para hacer el update
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();

            // Consulta para actualizar la cantidad del producto
            String sqlUpdate = "UPDATE productos SET cantidad = ? WHERE idProducto = ?";
            PreparedStatement consulta = cn.prepareStatement(sqlUpdate);

            int cantidadNueva = existencia - cantidad;  // Restar la cantidad vendida
            consulta.setInt(1, cantidadNueva);  // Establecer la nueva cantidad
            consulta.setInt(2, id);  // Usar el id del producto

            // Ejecutar la consulta de actualización
            if (consulta.executeUpdate() > 0) {
                System.out.println("Stock actualizado correctamente.");
            } else {
                System.out.println("Error al actualizar el stock.");
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad: " + e.getMessage());
        }
    }
}
