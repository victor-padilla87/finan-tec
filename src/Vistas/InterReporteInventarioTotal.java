package Vistas;

import Conexion.Conexionmysql;
import static Vistas.MenuInventario.jDesktopPane_menuInventario;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.image.ImageObserver.WIDTH;
import java.beans.PropertyVetoException;
import java.io.FileOutputStream;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

public class InterReporteInventarioTotal extends javax.swing.JInternalFrame {

    public static String Fecha_Inicio = "", Fecha_Fin = "";
    private Object dataset;
    private String fechaInicioStr;
    private String fechaFinStr;

    public InterReporteInventarioTotal() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("Reporte Inventario Total");

        this.cargarProductosEnComboBox();

        // metodo para insertar imagen por medio de codigo
        ImageIcon wallpaper = new ImageIcon("src/imagenes/fondo3.jpg");
        Icon Icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_wallpaper.setIcon(Icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser_fechaInicio = new com.toedter.calendar.JDateChooser();
        jDateChooser_fechaFin = new com.toedter.calendar.JDateChooser();
        jButton_GeneralReportes = new javax.swing.JButton();
        jButton_ExportarPdf = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxSeleccioneProducto = new javax.swing.JComboBox<>();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reporte Inventario Total");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 280, 30));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Fecha Inicio:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 150, 30));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Fecha Fin:");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, 150, 30));

        jDateChooser_fechaInicio.setBackground(new java.awt.Color(255, 255, 255));
        jDateChooser_fechaInicio.setForeground(new java.awt.Color(0, 0, 0));
        jDateChooser_fechaInicio.setDateFormatString("yyyy-MM-dd");
        jDateChooser_fechaInicio.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        getContentPane().add(jDateChooser_fechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 85, 190, 30));

        jDateChooser_fechaFin.setBackground(new java.awt.Color(255, 255, 255));
        jDateChooser_fechaFin.setForeground(new java.awt.Color(0, 0, 0));
        jDateChooser_fechaFin.setDateFormatString("yyyy-MM-dd");
        jDateChooser_fechaFin.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        getContentPane().add(jDateChooser_fechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 190, 30));

        jButton_GeneralReportes.setBackground(new java.awt.Color(0, 255, 255));
        jButton_GeneralReportes.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton_GeneralReportes.setForeground(new java.awt.Color(0, 0, 0));
        jButton_GeneralReportes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/historial1.png"))); // NOI18N
        jButton_GeneralReportes.setText("General Rorte");
        jButton_GeneralReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GeneralReportesActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_GeneralReportes, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, 180, 40));

        jButton_ExportarPdf.setBackground(new java.awt.Color(0, 255, 255));
        jButton_ExportarPdf.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton_ExportarPdf.setForeground(new java.awt.Color(0, 0, 0));
        jButton_ExportarPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/historial1.png"))); // NOI18N
        jButton_ExportarPdf.setText("Exportar Pdf");
        jButton_ExportarPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExportarPdfActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_ExportarPdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 270, 180, 40));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Tipo de Producto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 85, 230, 30));

        jComboBoxSeleccioneProducto.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxSeleccioneProducto.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jComboBoxSeleccioneProducto.setForeground(new java.awt.Color(0, 0, 0));
        jComboBoxSeleccioneProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Tpo de producto:", "todos", " " }));
        jComboBoxSeleccioneProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSeleccioneProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxSeleccioneProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 85, 240, 30));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, 0, 890, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_GeneralReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GeneralReportesActionPerformed
        // Obtener las fechas seleccionadas de los JDateChooser
        Date fechaInicio = jDateChooser_fechaInicio.getDate();
        Date fechaFin = jDateChooser_fechaFin.getDate();

// Validar que las fechas no estén vacías
        if (fechaInicio == null || fechaFin == null) {
            JOptionPane.showMessageDialog(null, "Por favor selecciona ambas fechas.");
            return;
        }

// Formatear las fechas a un formato adecuado para consultas SQL
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String fechaInicioStr = sdf.format(fechaInicio);
        String fechaFinStr = sdf.format(fechaFin);

// Obtener el producto seleccionado en el JComboBox
        String productoSeleccionado = jComboBoxSeleccioneProducto.getSelectedItem().toString();

// Definir la consulta SQL
        String sql = "SELECT p.nombre, SUM(p.cantidad) AS total_inventario "
                + "FROM productos p WHERE p.fecha_ingreso BETWEEN ? AND ? ";

// Si no se selecciona "Todos", añadir un filtro adicional
        if (!productoSeleccionado.equalsIgnoreCase("Todos")) {
            sql += "AND p.nombre = ? "; // Condición para un producto específico
        }

        sql += "GROUP BY p.nombre";

        try {
            // Conectar a la base de datos
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();
            PreparedStatement pst = cn.prepareStatement(sql);

            // Establecer los parámetros de fecha en la consulta
            pst.setString(1, fechaInicioStr);
            pst.setString(2, fechaFinStr);

            // Si un producto específico está seleccionado, añadir el producto a la consulta
            if (!productoSeleccionado.equalsIgnoreCase("Todos")) {
                pst.setString(3, productoSeleccionado);  // Establecer el nombre del producto
            }

            // Ejecutar la consulta
            ResultSet rs = pst.executeQuery();

            // Verificar si hay resultados
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(null, "No se encontraron registros en el rango de fechas seleccionado.");
                return;
            }

            // Crear el dataset para la gráfica de barras
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            // Procesar resultados y agregar datos al dataset
            while (rs.next()) {
                String nombreProducto = rs.getString("nombre");
                int totalInventario = rs.getInt("total_inventario");
                dataset.addValue(totalInventario, "Inventario", nombreProducto);
            }

            // Crear la gráfica de barras
            JFreeChart chart = ChartFactory.createBarChart(
                    "Reporte de Inventario", // Título de la gráfica
                    "Producto", // Etiqueta del eje X
                    "Cantidad Total", // Etiqueta del eje Y
                    dataset, // Datos
                    PlotOrientation.VERTICAL, // Orientación de la gráfica
                    true, // Incluir leyenda
                    true, // Mostrar tooltips
                    false // No usar URLs
            );

            // Crear el panel de la gráfica y añadir la gráfica
            ChartPanel chartPanel = new ChartPanel(chart);
            chartPanel.setPreferredSize(new java.awt.Dimension(800, 600));

            // Crear un JInternalFrame para mostrar la gráfica
            JInternalFrame internalFrame = new JInternalFrame("Gráfica de Inventario", true, true, true, true);
            internalFrame.setSize(800, 600);
            internalFrame.add(chartPanel);
            internalFrame.setVisible(true);

            // Añadir el JInternalFrame al JDesktopPane
            jDesktopPane_menuInventario.add(internalFrame);
            try {
                internalFrame.setSelected(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(InterReporteInventarioTotal.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al obtener los datos: " + e.getMessage());

        }
        // Limpiar los campos (ajusta según los nombres de tus componentes)
        jComboBoxSeleccioneProducto.setSelectedIndex(0); // Restablecer a "Seleccionar Producto"
        jDateChooser_fechaInicio.setDate(null); // Limpiar la fecha de inicio
        jDateChooser_fechaFin.setDate(null); // Limpiar la fecha de fin

    }//GEN-LAST:event_jButton_GeneralReportesActionPerformed

    private void jButton_ExportarPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExportarPdfActionPerformed
        // Conectar a la base de datos y obtener los datos de inventario por producto
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();

// Consulta para obtener idProducto, nombre y cantidad en inventario
        String sql = "SELECT p.idProducto, p.nombre, SUM(p.cantidad) AS cantidad_total "
                + "FROM productos p "
                + "GROUP BY p.idProducto, p.nombre";

        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            pst = cn.prepareStatement(sql);
            rs = pst.executeQuery();

            // Crear un formato de fecha adecuado para nombres de archivos
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String fechaActualStr = dateFormat.format(new Date());

            // Ruta donde se guardará el archivo PDF
            String ruta = "reporte_inventario_total_" + fechaActualStr + ".pdf";

            // Generar el PDF usando iText
            Document documento = new Document();
            PdfWriter.getInstance(documento, new FileOutputStream(ruta));
            documento.open();

            // Título del reporte
            Paragraph titulo = new Paragraph("Reporte de Inventario Total",
                    FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, Font.BOLD, BaseColor.BLACK));
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.setSpacingAfter(20);  // Espacio después del título
            documento.add(titulo);

            // Agregar la fecha de generación
            Paragraph fecha = new Paragraph("Fecha de generación: " + fechaActualStr,
                    FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK));
            fecha.setAlignment(Element.ALIGN_RIGHT);
            fecha.setSpacingAfter(10);
            documento.add(fecha);

            // Crear tabla con 3 columnas (ID Producto, Nombre, Cantidad Total)
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);

            // Configurar los anchos de las columnas
            float[] columnWidths = {1f, 2f, 2f}; // Ajustar los anchos según necesidad
            table.setWidths(columnWidths);

            // Agregar encabezados a la tabla
            PdfPCell cell;

            String[] headers = {"ID Producto", "Nombre", "Cantidad Total"};
            for (String header : headers) {
                cell = new PdfPCell(new Phrase(header,
                        FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
                cell.setBackgroundColor(BaseColor.BLUE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(10f);
                table.addCell(cell);
            }

            // Agregar los datos de inventario por producto
            while (rs.next()) {
                // ID Producto
                cell = new PdfPCell(new Phrase(String.valueOf(rs.getInt("idProducto")),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                // Nombre
                cell = new PdfPCell(new Phrase(rs.getString("nombre"),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                // Cantidad Total
                cell = new PdfPCell(new Phrase(String.valueOf(rs.getInt("cantidad_total")),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);
            }

            // Agregar la tabla al documento
            documento.add(table);

            // Cerrar el documento
            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte guardado en: " + ruta);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al generar el PDF: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }
        // Limpiar los campos (ajusta según los nombres de tus componentes)
        jComboBoxSeleccioneProducto.setSelectedIndex(0); // Restablecer a "Seleccionar Producto"
        jDateChooser_fechaInicio.setDate(null); // Limpiar la fecha de inicio
        jDateChooser_fechaFin.setDate(null); // Limpiar la fecha de fin

    }//GEN-LAST:event_jButton_ExportarPdfActionPerformed

    private void jComboBoxSeleccioneProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSeleccioneProductoActionPerformed

    }//GEN-LAST:event_jComboBoxSeleccioneProductoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_ExportarPdf;
    private javax.swing.JButton jButton_GeneralReportes;
    private javax.swing.JComboBox<String> jComboBoxSeleccioneProducto;
    private com.toedter.calendar.JDateChooser jDateChooser_fechaFin;
    private com.toedter.calendar.JDateChooser jDateChooser_fechaInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpaper;
    // End of variables declaration//GEN-END:variables

    private Number dataset(Object key) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    // Método para cargar productos en el JComboBox
    private void cargarProductosEnComboBox() {
        jComboBoxSeleccioneProducto.removeAllItems();  // Limpia el ComboBox antes de cargar nuevos productos
        jComboBoxSeleccioneProducto.addItem("Seleccione un producto");  // Agrega una opción por defecto
        jComboBoxSeleccioneProducto.addItem("Todos");  // Agrega una opción para seleccionar todos los productos

        try {
            // Conectar a la base de datos
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();

            // Consulta para obtener los nombres de los productos actuales
            String sql = "SELECT nombre FROM productos";
            PreparedStatement pst = cn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            // Cargar los productos en el ComboBox
            while (rs.next()) {
                String nombreProducto = rs.getString("nombre");
                jComboBoxSeleccioneProducto.addItem(nombreProducto);  // Añadir producto al JComboBox
            }

            // Cerrar conexiones
            rs.close();
            pst.close();
            cn.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
        }
    }

}
