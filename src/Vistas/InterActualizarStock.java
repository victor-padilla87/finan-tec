package Vistas;

import Conexion.Conexionmysql;
import controlador.Ctr_Producto;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import modelo.Producto;

public class InterActualizarStock extends javax.swing.JInternalFrame {

    public InterActualizarStock() {
        initComponents();
        this.setTitle("Actualizar Stock");
        this.setSize(new Dimension(600, 400));

        this.CargaComboProductos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_seleccioneProducto = new javax.swing.JComboBox<>();
        txt_stockActual = new javax.swing.JTextField();
        txt_nuevoStock = new javax.swing.JTextField();
        jButton_actualizaStock = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_codigo = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Actualizar Stock");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 110, 27));

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Stock Actual:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 110, 27));

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Nuevo Stock:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 110, 27));

        jComboBox_seleccioneProducto.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_seleccioneProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox_seleccioneProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:", "item 1", "item 2", "item 3" }));
        getContentPane().add(jComboBox_seleccioneProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 150, 30));

        txt_stockActual.setBackground(new java.awt.Color(255, 255, 255));
        txt_stockActual.setEnabled(false);
        getContentPane().add(txt_stockActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 150, 30));

        txt_nuevoStock.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_nuevoStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 150, 30));

        jButton_actualizaStock.setBackground(javax.swing.UIManager.getDefaults().getColor("nb.versioning.added.color"));
        jButton_actualizaStock.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton_actualizaStock.setForeground(java.awt.Color.green);
        jButton_actualizaStock.setText("Actualizar Stock");
        jButton_actualizaStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizaStockActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_actualizaStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, -1, 40));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Codigo:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 110, 27));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Descripcion:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 110, 27));

        txt_codigo.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txt_codigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 150, 30));

        txt_descripcion.setBackground(new java.awt.Color(255, 255, 255));
        txt_descripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_descripcionActionPerformed(evt);
            }
        });
        getContentPane().add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 150, 30));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_descripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_descripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_descripcionActionPerformed

    private void jButton_actualizaStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizaStockActionPerformed
        // Validar que se haya seleccionado un producto
        String productoSeleccionado = (String) jComboBox_seleccioneProducto.getSelectedItem();

        if (productoSeleccionado != null && !productoSeleccionado.equals("Seleccione producto:")) {
            // Validar que el campo del nuevo stock no esté vacío
            if (!txt_nuevoStock.getText().isEmpty()) {
                // Validar que solo se ingresen caracteres numéricos
                boolean validacion = Validar(txt_nuevoStock.getText().trim());
                if (validacion) {
                    // Validar que la cantidad no sea cero ni negativa
                    if (Integer.parseInt(txt_nuevoStock.getText()) > 0) {

                        Producto producto = new Producto();
                        Ctr_Producto controlProducto = new Ctr_Producto();

                        // Obtener el Stock actual y el nuevo Stock
                        int StockActual = Integer.parseInt(txt_stockActual.getText().trim());
                        int StockNuevo = Integer.parseInt(txt_nuevoStock.getText().trim());
                        StockNuevo = StockActual + StockNuevo;

                        // Asignar el nuevo stock al producto
                        producto.setCantidad(StockNuevo);

                        // Obtener el idProducto desde el HashMap productosMap
                        int idProducto = productosMap.get(productoSeleccionado);

                        // Actualizar el stock del producto
                        if (controlProducto.ActualizarStock(producto, idProducto)) {
                            JOptionPane.showMessageDialog(null, "Stock Actualizado");
                            jComboBox_seleccioneProducto.setSelectedItem("Seleccione producto:");
                            this.CargaComboProductos();  // Recargar productos en el ComboBox
                            this.limpiarCampos();
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al actualizar el Stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero ni negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Solo se admiten caracteres numéricos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese una nueva cantidad");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        }
    }//GEN-LAST:event_jButton_actualizaStockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizaStock;
    private javax.swing.JComboBox<String> jComboBox_seleccioneProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JTextField txt_codigo;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nuevoStock;
    private javax.swing.JTextField txt_stockActual;
    // End of variables declaration//GEN-END:variables

// HashMap para almacenar el nombre del producto y su respectivo idProducto
    private HashMap<String, Integer> productosMap = new HashMap<>();

// Método para cargar los productos en el ComboBox
    private void CargaComboProductos() {
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        String sql = "select idProducto, nombre from productos";
        Statement st;

        try {
            st = cn.createStatement();
            java.sql.ResultSet rs = st.executeQuery(sql);
            jComboBox_seleccioneProducto.removeAllItems();
            jComboBox_seleccioneProducto.addItem("Seleccione un producto:");

            // Limpiar el mapa de productos antes de llenarlo
            productosMap.clear();

            while (rs.next()) {
                String nombreProducto = rs.getString("nombre");
                int idProducto = rs.getInt("idProducto");

                // Añadir el producto al ComboBox y al HashMap
                jComboBox_seleccioneProducto.addItem(nombreProducto);
                productosMap.put(nombreProducto, idProducto);
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar los productos: " + e);
        }

        // Agregar el ActionListener al ComboBox
        jComboBox_seleccioneProducto.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String productoSeleccionado = (String) jComboBox_seleccioneProducto.getSelectedItem();

                // Verifica que no sea la opción por defecto
                if (!productoSeleccionado.equals("Seleccione un producto:")) {
                    // Obtiene el idProducto del HashMap
                    int idProducto = productosMap.get(productoSeleccionado);
                    cargarInformacionProducto(idProducto);
                } else {
                    limpiarCampos();
                }
            }
        });
    }

// Método para cargar la información del producto en los campos de texto
    private void cargarInformacionProducto(int idProducto) {
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        String sql = "SELECT nombre, cantidad, descripcion  FROM productos WHERE idProducto = ?";
        PreparedStatement pst;

        try {
            pst = cn.prepareStatement(sql);
            pst.setInt(1, idProducto);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {

                String descripcion = rs.getString("descripcion");
                int cantidad = rs.getInt("cantidad");

                // Asigna los valores obtenidos a los campos de texto
                txt_stockActual.setText(String.valueOf(cantidad));
                txt_nuevoStock.setText(String.valueOf(""));
                txt_codigo.setText(String.valueOf(idProducto));
                txt_descripcion.setText(descripcion);
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar la información del producto: " + e);
        }
    }

// Método para limpiar los campos de texto
    private void limpiarCampos() {
        txt_stockActual.setText("");
        txt_nuevoStock.setText("");
        txt_codigo.setText("");
        txt_descripcion.setText("");
    }
// meto para validacion de carracteres no numericos

    private boolean Validar(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}
