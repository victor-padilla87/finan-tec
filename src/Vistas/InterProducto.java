package Vistas;

import Conexion.Conexionmysql;
import controlador.Ctr_Producto;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import modelo.Producto;

public class InterProducto extends javax.swing.JInternalFrame {

    int obtenerIdCategoriaCmbox = 0;

    public InterProducto() {
        initComponents();
        this.setSize(new Dimension(500, 400));
        this.setTitle("Nuevo Producto");

        this.CargaComboCategorias();
        this.CargarComboProveedores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_precio_venta = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        jComboBox_seleccione_iva = new javax.swing.JComboBox<>();
        jComboBox_seleccione_proveedor = new javax.swing.JComboBox<>();
        jComboBox_seleccione_categoria = new javax.swing.JComboBox<>();
        jButton_guardarProducto = new javax.swing.JButton();
        jLabel_wall_paper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nuevo Producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, 140, 30));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Nombre:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 90, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Cantidad:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 90, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Precio compra:");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 120, -1));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Precio venta:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 110, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Descripcion:");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 90, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Iva:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 90, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Categorias:");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, 90, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Proveedor:");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 90, -1));

        txt_nombre.setBackground(new java.awt.Color(255, 255, 255));
        txt_nombre.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        getContentPane().add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 210, -1));

        txt_cantidad.setBackground(new java.awt.Color(255, 255, 255));
        txt_cantidad.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 210, -1));

        txt_precio.setBackground(new java.awt.Color(255, 255, 255));
        txt_precio.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        getContentPane().add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 210, -1));

        txt_precio_venta.setBackground(new java.awt.Color(255, 255, 255));
        txt_precio_venta.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        getContentPane().add(txt_precio_venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 210, -1));

        txt_descripcion.setBackground(new java.awt.Color(255, 255, 255));
        txt_descripcion.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        getContentPane().add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 210, -1));

        jComboBox_seleccione_iva.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_seleccione_iva.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox_seleccione_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione iva:", "no tiene iva", "16%", "19%" }));
        jComboBox_seleccione_iva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_seleccione_ivaActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_seleccione_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 210, -1));

        jComboBox_seleccione_proveedor.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_seleccione_proveedor.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox_seleccione_proveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione proveedor:", "item 1", "item 2", "item 3" }));
        jComboBox_seleccione_proveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_seleccione_proveedorActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_seleccione_proveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 210, -1));

        jComboBox_seleccione_categoria.setBackground(new java.awt.Color(255, 255, 255));
        jComboBox_seleccione_categoria.setForeground(new java.awt.Color(0, 0, 0));
        jComboBox_seleccione_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione categoria:" }));
        jComboBox_seleccione_categoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_seleccione_categoriaActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_seleccione_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 210, -1));

        jButton_guardarProducto.setBackground(new java.awt.Color(0, 255, 255));
        jButton_guardarProducto.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_guardarProducto.setForeground(new java.awt.Color(0, 0, 0));
        jButton_guardarProducto.setText("Guardar Producto");
        jButton_guardarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_guardarProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_guardarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 150, 30));

        jLabel_wall_paper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wall_paper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_seleccione_categoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_seleccione_categoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_seleccione_categoriaActionPerformed

    private void jButton_guardarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_guardarProductoActionPerformed
        Producto producto = new Producto();
        Ctr_Producto controlProducto = new Ctr_Producto();
        String iva = "";
        String categorias = "";
        String proveedor = "";
        iva = jComboBox_seleccione_iva.getSelectedItem().toString().trim();
        categorias = jComboBox_seleccione_categoria.getSelectedItem().toString().trim();
        proveedor = jComboBox_seleccione_proveedor.getSelectedItem().toString().trim();
// validar que no hayan campos vacíos
        if (txt_nombre.getText().equals("") || txt_cantidad.getText().equals("") || txt_precio_venta.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        } else {
            // validar existencia del producto
            if (!controlProducto.existeProducto(txt_nombre.getText().trim())) {
                if (iva.equalsIgnoreCase("Seleccione iva:")) {
                    JOptionPane.showMessageDialog(null, "Seleccione el iva");
                } else {
                    if (categorias.equalsIgnoreCase("Seleccione categoria:")) {
                        JOptionPane.showMessageDialog(null, "Seleccione la categoria");
                    } else {
                        try {
                            producto.setNombre(txt_nombre.getText().trim());
                            producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));

                            // Capturar precio de compra
                            String precioTXT = txt_precio.getText().trim();
                            double precioCompra = 0.0;
                            boolean aux = false;

                            // Validar y convertir si es necesario (de coma a punto)
                            for (int i = 0; i < precioTXT.length(); i++) {
                                if (precioTXT.charAt(i) == ',') {
                                    String precioNuevo = precioTXT.replace(",", ".");
                                    precioCompra = Double.parseDouble(precioNuevo);
                                    aux = true;
                                }
                            }

                            if (aux == true) {
                                producto.setPrecioCompra(precioCompra);
                            } else {
                                precioCompra = Double.parseDouble(precioTXT);
                                producto.setPrecioCompra(precioCompra);
                            }

                            // Capturar y establecer precio de venta
                            String precioVentaTXT = txt_precio_venta.getText().trim();
                            double precioVenta = 0.0;
                            aux = false;

                            for (int i = 0; i < precioVentaTXT.length(); i++) {
                                if (precioVentaTXT.charAt(i) == ',') {
                                    String precioNuevo = precioVentaTXT.replace(",", ".");
                                    precioVenta = Double.parseDouble(precioNuevo);
                                    aux = true;
                                }
                            }

                            if (aux == true) {
                                producto.setPrecioUnitario(precioVenta);
                            } else {
                                precioVenta = Double.parseDouble(precioVentaTXT);
                                producto.setPrecioUnitario(precioVenta);
                            }

                            producto.setDescripcion(txt_descripcion.getText().trim());

                            // Validación del IVA
                            if (iva.equalsIgnoreCase("No tiene iva")) {
                                producto.setPorcentajeIva(0.0);
                            } else if (iva.equalsIgnoreCase("16%")) {
                                producto.setPorcentajeIva(0.12);
                            } else if (iva.equalsIgnoreCase("19%")) {
                                producto.setPorcentajeIva(0.19);
                            }

                            // Método para obtener el idCategoria
                            this.IdCategoria();
                            producto.setIdCategoria(obtenerIdCategoriaCmbox);

                            if (controlProducto.guardar(producto)) {
                                JOptionPane.showMessageDialog(null, "Registro guardado");
                                this.CargaComboCategorias();
                                this.jComboBox_seleccione_iva.setSelectedItem("Seleccione iva:");
                                this.Limpiar();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al guardar");
                            }

                        } catch (HeadlessException | NumberFormatException e) {
                            System.out.println("Error en: " + e);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "El producto ya existe");
            }
        }
    }//GEN-LAST:event_jButton_guardarProductoActionPerformed

    private void jComboBox_seleccione_ivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_seleccione_ivaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_seleccione_ivaActionPerformed

    private void jComboBox_seleccione_proveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_seleccione_proveedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_seleccione_proveedorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_guardarProducto;
    private javax.swing.JComboBox<String> jComboBox_seleccione_categoria;
    private javax.swing.JComboBox<String> jComboBox_seleccione_iva;
    private javax.swing.JComboBox<String> jComboBox_seleccione_proveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_wall_paper;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    private javax.swing.JTextField txt_precio_venta;
    // End of variables declaration//GEN-END:variables

    //metodo para limpiar los campos
    private void Limpiar() {
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_precio_venta.setText("");
        txt_descripcion.setText("");
        

    }
    
    // metodo para cargar el combo provvedores

    private void CargarComboProveedores() {

        // Obtener la conexión a la base de datos
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        String sql = "Select * from proveedores";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_seleccione_proveedor.removeAllItems();
            jComboBox_seleccione_proveedor.addItem("Seleccione proveedor:");
            while (rs.next()) {
                jComboBox_seleccione_proveedor.addItem(rs.getString("nombre"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cargar los proveedores" + e);
        }

    }

// metodo para cargar las categorias en el comboBox
    private void CargaComboCategorias() {
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        String sql = "select * from categorias";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_seleccione_categoria.removeAllItems();
            jComboBox_seleccione_categoria.addItem("Seleccione una categoria:");
            while (rs.next()) {
                jComboBox_seleccione_categoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar las categorias" + e);
        }

    }

    // metodo para obtener el idCategoria
    private int IdCategoria() {
        String sql = "SELECT idCategoria FROM categorias WHERE descripcion = ?";
        int obtenerIdCategoriaCmbox = -1;  // Valor por defecto si no se encuentra la categoría
        try {
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();

            // Usar PreparedStatement para manejar el parámetro
            PreparedStatement st = cn.prepareStatement(sql);
            String descripcion = null;
            st.setString(1, descripcion);  // Asignar el valor de la descripción

            ResultSet rs = st.executeQuery();

            // Si se encuentra la categoría, obtener el idCategoria
            if (rs.next()) {
                obtenerIdCategoriaCmbox = rs.getInt("idCategoria");
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el idCategoria: " + e.getMessage());
        }

        return obtenerIdCategoriaCmbox;
    }

}
