package Vistas;

import Conexion.Conexionmysql;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.image.BufferedImage;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.plot.PlotOrientation;

public class InterVentasPorProductos extends javax.swing.JInternalFrame {

    public InterVentasPorProductos() {
        initComponents();
        this.setSize(new Dimension(700, 500));
        this.setTitle("Reporte Ventas Por Producto");

        this.CargarTablaVentasPorProducto();

        // metodo para insertar imagen por medio de codigo
        ImageIcon wallpaper = new ImageIcon("src/imagenes/fondo3.jpg");
        Icon Icono = new ImageIcon(wallpaper.getImage().getScaledInstance(700, 500, WIDTH));
        jLabel_wallpaper.setIcon(Icono);
        this.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_VentasPorProducto = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_Graficar = new javax.swing.JButton();
        jButton_GeneralPdf = new javax.swing.JButton();
        jButton_DescargarGraficar = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reporte Ventas Por Producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 8, 320, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_VentasPorProducto.setBackground(new java.awt.Color(255, 255, 255));
        jTable_VentasPorProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_VentasPorProducto);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 650, 280));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 670, 300));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_Graficar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jButton_Graficar.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton_Graficar.setForeground(new java.awt.Color(0, 70, 211));
        jButton_Graficar.setText("General Grafica");
        jButton_Graficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GraficarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_Graficar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 160, 50));

        jButton_GeneralPdf.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jButton_GeneralPdf.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton_GeneralPdf.setForeground(new java.awt.Color(0, 132, 118));
        jButton_GeneralPdf.setText("General Pdf");
        jButton_GeneralPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GeneralPdfActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_GeneralPdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, 160, 50));

        jButton_DescargarGraficar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jButton_DescargarGraficar.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jButton_DescargarGraficar.setForeground(new java.awt.Color(0, 229, 202));
        jButton_DescargarGraficar.setText("Descargar Grafica");
        jButton_DescargarGraficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DescargarGraficarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_DescargarGraficar, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, 160, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 670, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_GeneralPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GeneralPdfActionPerformed
        // Conectar a la base de datos y obtener los datos de ventas por producto
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();

        // Consulta para obtener idProducto, nombre, cantidad vendida y monto total
        String sql = "SELECT dv.idProducto, p.nombre, SUM(dv.cantidad) AS cantidad_vendida, SUM(dv.cantidad * dv.total_apagar) AS monto_total "
                + "FROM detalle_venta dv "
                + "JOIN productos p ON dv.idProducto = p.idProducto "
                + "GROUP BY dv.idProducto, p.nombre";

        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            pst = cn.prepareStatement(sql);
            rs = pst.executeQuery();

            // Crear un formato de fecha adecuado para nombres de archivos
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String fechaActualStr = dateFormat.format(new Date());

            // Ruta donde se guardará el archivo PDF
            String ruta = "reporte_ventas_por_producto_" + fechaActualStr + ".pdf";

            // Generar el PDF usando iText
            Document documento = new Document();
            PdfWriter.getInstance(documento, new FileOutputStream(ruta));
            documento.open();

            // Título del reporte
            Paragraph titulo = new Paragraph("Reporte de Ventas por Producto",
                    FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, Font.BOLD, BaseColor.BLACK));
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.setSpacingAfter(20);  // Espacio después del título
            documento.add(titulo);

            // Agregar la fecha de generación
            Paragraph fecha = new Paragraph("Fecha de generación: " + fechaActualStr,
                    FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK));
            fecha.setAlignment(Element.ALIGN_RIGHT);
            fecha.setSpacingAfter(10);
            documento.add(fecha);

            // Crear tabla con 4 columnas (ID Producto, Nombre, Cantidad Vendida, Monto Total)
            PdfPTable table = new PdfPTable(4);
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);

            // Configurar los anchos de las columnas
            float[] columnWidths = {1f, 2f, 2f, 2f}; // Ajustar los anchos según necesidad
            table.setWidths(columnWidths);

            // Agregar encabezados a la tabla
            PdfPCell cell;

            String[] headers = {"ID Producto", "Nombre", "Cantidad Vendida", "Monto Total"};
            for (String header : headers) {
                cell = new PdfPCell(new Phrase(header,
                        FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12, BaseColor.WHITE)));
                cell.setBackgroundColor(BaseColor.BLUE);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(10f);
                table.addCell(cell);
            }

            // Agregar los datos de ventas por producto
            while (rs.next()) {
                // ID Producto
                cell = new PdfPCell(new Phrase(String.valueOf(rs.getInt("idProducto")),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                // Nombre
                cell = new PdfPCell(new Phrase(rs.getString("nombre"),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                // Cantidad Vendida
                cell = new PdfPCell(new Phrase(String.valueOf(rs.getInt("cantidad_vendida")),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);

                // Monto Total
                cell = new PdfPCell(new Phrase(String.valueOf(rs.getDouble("monto_total")),
                        FontFactory.getFont(FontFactory.HELVETICA, 12, BaseColor.BLACK)));
                cell.setPadding(8f);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cell);
            }

            // Agregar la tabla al documento
            documento.add(table);

            // Cerrar el documento
            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte guardado en: " + ruta);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al generar el PDF: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton_GeneralPdfActionPerformed

    private void jButton_GraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GraficarActionPerformed
        // Crear el dataset para el gráfico
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Conectar a la base de datos y obtener los datos de ventas por producto
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();

        // Consulta para obtener el idProducto, nombre, cantidad vendida y monto total por producto
        String sql = "SELECT dv.idProducto, p.nombre, SUM(dv.cantidad) AS cantidad_vendida, SUM(dv.cantidad * dv.total_apagar) AS monto_total "
                + "FROM detalle_venta dv "
                + "JOIN productos p ON dv.idProducto = p.idProducto "
                + "GROUP BY dv.idProducto, p.nombre";

        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            pst = cn.prepareStatement(sql);
            rs = pst.executeQuery();

            // Recorrer los resultados y añadir al dataset
            while (rs.next()) {
                int idProducto = rs.getInt("idProducto");
                String nombre = rs.getString("nombre");
                int cantidadVendida = rs.getInt("cantidad_vendida");
                double montoTotal = rs.getDouble("monto_total");

                // Añadir la cantidad vendida al dataset (puedes cambiar a monto si prefieres)
                dataset.addValue(montoTotal, "Monto Total", nombre + " (ID: " + idProducto + ")");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener los datos: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }

        // Crear el gráfico de barras con los datos obtenidos
        JFreeChart chart = ChartFactory.createBarChart(
                "Ventas por Producto", // Título del gráfico
                "Producto", // Etiqueta del eje X
                "Monto Total", // Etiqueta del eje Y
                dataset, // Datos para el gráfico
                PlotOrientation.VERTICAL, // Orientación del gráfico
                true, // Incluir leyenda
                true, // Incluir tooltips
                false // No incluir URLs
        );

        // Crear un panel para mostrar el gráfico
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        // Crear una ventana para mostrar el gráfico
        JFrame ventanaGrafico = new JFrame("Gráfico de Ventas por Producto");
        ventanaGrafico.setContentPane(chartPanel);
        ventanaGrafico.pack();
        ventanaGrafico.setVisible(true);
        ventanaGrafico.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_jButton_GraficarActionPerformed

    private void jButton_DescargarGraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DescargarGraficarActionPerformed
        // Crear el dataset para el gráfico
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Conectar a la base de datos y obtener las ventas por producto
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();

        // SQL para obtener el ID del producto, nombre, la cantidad total vendida y el monto total por producto
        String sql = "SELECT p.idProducto, p.nombre, SUM(v.cantidad) AS total_vendido, SUM(v.cantidad * v.total_apagar) AS monto_total "
                + "FROM productos p "
                + "JOIN detalle_venta v ON p.idProducto = v.idProducto "
                + "GROUP BY p.idProducto, p.nombre";

        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            pst = cn.prepareStatement(sql);
            rs = pst.executeQuery();

            // Recorrer los resultados y añadir al dataset
            while (rs.next()) {
                int idProducto = rs.getInt("idProducto");
                String nombre = rs.getString("nombre");
                int totalVendido = rs.getInt("total_vendido");
                double montoTotal = rs.getDouble("monto_total");

                // Añadir la cantidad vendida y el monto total al dataset
                dataset.addValue(montoTotal, "Monto Total", nombre + " (ID: " + idProducto + ")");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener los datos de ventas: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }

        // Crear el gráfico de barras con los datos obtenidos
        JFreeChart chart = ChartFactory.createBarChart(
                "Ventas por Producto", // Título del gráfico
                "Producto", // Etiqueta del eje X
                "Monto Total", // Etiqueta del eje Y
                dataset, // Dataset
                PlotOrientation.VERTICAL, // Orientación del gráfico
                true, // Incluir leyenda
                true, // Incluir tooltips
                false // No incluir URLs
        );

        // Guardar el gráfico en un archivo PDF
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar gráfico como");

        // Filtro para archivos PDF
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".pdf") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Archivo PDF (*.pdf)";
            }
        });

        int userSelection = fileChooser.showSaveDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Asegurarse de que el archivo tenga la extensión .pdf
            if (!fileToSave.getName().toLowerCase().endsWith(".pdf")) {
                fileToSave = new File(fileToSave + ".pdf");
            }

            try {
                // Crear el documento PDF
                Document document = new Document();
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(fileToSave));
                document.open();

                // Añadir el título al PDF
                document.add(new Paragraph("Reporte de Ventas por Producto"));
                document.add(new Paragraph(" ")); // Espacio en blanco

                // Convertir el gráfico a una imagen
                BufferedImage chartImage = chart.createBufferedImage(800, 600);
                Image image = Image.getInstance(writer, chartImage, 1.0f);

                // Añadir la imagen del gráfico al PDF
                document.add(image);

                // Cerrar el documento
                document.close();
                writer.close();

                JOptionPane.showMessageDialog(null, "PDF guardado exitosamente en: " + fileToSave.getAbsolutePath());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al guardar el PDF: " + e.getMessage());
            }
        }


    }//GEN-LAST:event_jButton_DescargarGraficarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_DescargarGraficar;
    private javax.swing.JButton jButton_GeneralPdf;
    private javax.swing.JButton jButton_Graficar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_wallpaper;
    public static javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_VentasPorProducto;
    // End of variables declaration//GEN-END:variables

    // Método para cargar la tabla con las ventas por producto
    private void CargarTablaVentasPorProducto() {
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        DefaultTableModel model = new DefaultTableModel();

        // Consulta para obtener el idProducto, nombre, cantidad vendida y monto total
        String sql = "SELECT dv.idProducto, p.nombre, SUM(dv.cantidad) AS cantidad_vendida, SUM(dv.cantidad * dv.total_apagar) AS monto_total "
                + "FROM detalle_venta dv "
                + "JOIN productos p ON dv.idProducto = p.idProducto "
                + "GROUP BY dv.idProducto, p.nombre";

        Statement st = null;
        ResultSet rs = null;

        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);

            // Establecer el modelo de la tabla
            jTable_VentasPorProducto.setModel(model);
            jScrollPane1.setViewportView(jTable_VentasPorProducto);

            // Añadir columnas al modelo
            model.addColumn("Código Producto");
            model.addColumn("Nombre");
            model.addColumn("Cantidad Vendida");
            model.addColumn("Monto Total");

            // Cargar los datos en el modelo
            while (rs.next()) {
                Object fila[] = new Object[4];
                fila[0] = rs.getInt("idProducto");
                fila[1] = rs.getString("nombre");
                fila[2] = rs.getInt("cantidad_vendida");
                fila[3] = rs.getDouble("monto_total");
                model.addRow(fila);
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar los datos: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (st != null) {
                    st.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }
    }

    public void descargarGrafico(JFreeChart chart) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar gráfico como");

        // Filtro para guardar solo imágenes PNG
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".png") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Imagen PNG (*.png)";
            }
        });

        int userSelection = fileChooser.showSaveDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            if (!fileToSave.getName().toLowerCase().endsWith(".png")) {
                fileToSave = new File(fileToSave + ".png"); // Asegurarse de que el archivo tenga extensión .png
            }

            try {
                ChartUtils.saveChartAsPNG(fileToSave, chart, 800, 600);
                JOptionPane.showMessageDialog(null, "Gráfico guardado exitosamente en: " + fileToSave.getAbsolutePath());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al guardar el gráfico: " + e.getMessage());
            }
        }
    }

}
