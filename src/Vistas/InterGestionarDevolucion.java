package Vistas;

import Conexion.Conexionmysql;
import controlador.Ctr_Devoluciones;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Devoluciones;

public class InterGestionarDevolucion extends javax.swing.JInternalFrame {

    private int id_devolucion;
    int obtenerIdCategoriaCombo = 0;

    private int idProveedor;

    public InterGestionarDevolucion() {
        initComponents();
        this.setSize(new Dimension(732, 500));
        this.setTitle("Gestionar Productos");

        this.CargarTabla();

        // metodo para insertar imagen por medio de codigo
        ImageIcon wallpaper = new ImageIcon("src/imagenes/fondo3.jpg");
        Icon Icono = new ImageIcon(wallpaper.getImage().getScaledInstance(732, 500, WIDTH));
        jLabel_wallpaper.setIcon(Icono);
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_GestinoDevoluciones = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_cantidadDevuelta = new javax.swing.JTextField();
        txt_motivo = new javax.swing.JTextField();
        jButton_Actualizar = new javax.swing.JButton();
        jButton_Eliminar = new javax.swing.JButton();
        jDateChooser_fecha_devolucion = new com.toedter.calendar.JDateChooser();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestionar Devoluciones");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTable_GestinoDevoluciones.setBackground(new java.awt.Color(255, 255, 255));
        jTable_GestinoDevoluciones.setForeground(new java.awt.Color(0, 0, 0));
        jTable_GestinoDevoluciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_GestinoDevoluciones);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 670, 210));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 700, 230));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Cantidad Devuelta:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 200, -1));

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Motivo:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 45, 200, -1));

        jLabel6.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Fecha:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 200, -1));

        txt_cantidadDevuelta.setBackground(new java.awt.Color(255, 255, 255));
        txt_cantidadDevuelta.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(txt_cantidadDevuelta, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 190, 30));

        txt_motivo.setBackground(new java.awt.Color(255, 255, 255));
        txt_motivo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.add(txt_motivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 45, 190, 30));

        jButton_Actualizar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jButton_Actualizar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_Actualizar.setForeground(new java.awt.Color(34, 210, 62));
        jButton_Actualizar.setText("Actualizar");
        jButton_Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ActualizarActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_Actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 110, 40));

        jButton_Eliminar.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        jButton_Eliminar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton_Eliminar.setForeground(new java.awt.Color(221, 11, 10));
        jButton_Eliminar.setText("Elimanar");
        jButton_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EliminarActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 110, 40));

        jDateChooser_fecha_devolucion.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.add(jDateChooser_fecha_devolucion, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 190, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 700, 180));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ActualizarActionPerformed
        if (!txt_cantidadDevuelta.getText().trim().isEmpty() && !txt_motivo.getText().trim().isEmpty()) {
            try {
                // Crear instancia de Producto y controlador
                Devoluciones devoluciones = new Devoluciones();
                Ctr_Devoluciones controlDevoluciones = new Ctr_Devoluciones();

                // Asignar los valores de los campos a los atributos del objeto Devoluciones
                int cantidadDevuelta = Integer.parseInt(txt_cantidadDevuelta.getText().trim());
                devoluciones.setCantidad_devuelta(cantidadDevuelta);
                devoluciones.setMotivo(txt_motivo.getText().trim());

                // Obtener la fecha desde jDateChooser
                Date fechaDevolucion = jDateChooser_fecha_devolucion.getDate();
                devoluciones.setFecha_devolucion(fechaDevolucion);

                // Actualizar la devolución usando id_devolucion
                if (controlDevoluciones.ActualizarDevolucion(devoluciones, id_devolucion)) {
                    JOptionPane.showMessageDialog(null, "Se actualizó la devolución correctamente");

                    // Recargar la tabla y limpiar los campos del formulario
                    this.CargarTabla();
                    this.Limpiar();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar la devolucion");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido en la cantidad devuelta.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.");
        }

    }//GEN-LAST:event_jButton_ActualizarActionPerformed

    private void jButton_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EliminarActionPerformed
        if (!txt_cantidadDevuelta.getText().trim().isEmpty()) {
            try {
                int cantidadDevuelta = Integer.parseInt(txt_cantidadDevuelta.getText().trim()); // Convertir texto a entero
                Devoluciones devolucion = new Devoluciones();
                Ctr_Devoluciones controlDevoluciones = new Ctr_Devoluciones();

                devolucion.setCantidad_devuelta(cantidadDevuelta);

                if (controlDevoluciones.Eliminar(id_devolucion)) { // Asegurarse de pasar el id correcto
                    JOptionPane.showMessageDialog(null, "Devolucion eliminada");
                    txt_cantidadDevuelta.setText("");
                    this.CargarTabla();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al eliminar la devolucion");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido en la cantidad devuelta");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una devolucion");
        }
        this.Limpiar();
    }//GEN-LAST:event_jButton_EliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Actualizar;
    private javax.swing.JButton jButton_Eliminar;
    private com.toedter.calendar.JDateChooser jDateChooser_fecha_devolucion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_GestinoDevoluciones;
    private javax.swing.JTextField txt_cantidadDevuelta;
    private javax.swing.JTextField txt_motivo;
    // End of variables declaration//GEN-END:variables

    // Limpiar los campos del formulario
    private void Limpiar() {
        txt_cantidadDevuelta.setText("");
        txt_motivo.setText("");
        jDateChooser_fecha_devolucion.setDate(null);

    }

    private void CargarTabla() {
        Conexionmysql conexion = new Conexionmysql();
        Connection cn = conexion.getConnection();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT id_devolucion, idProducto, nombre_producto, cantidad_devuelta, motivo, fecha_devolucion FROM devoluciones";
        Statement st = null;
        ResultSet rs = null;

        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);

            // Obtener referencia a la tabla existente
            InterGestionarDevolucion.jTable_GestinoDevoluciones.setModel(model);
            InterGestionarDevolucion.jScrollPane1.setViewportView(InterGestionarDevolucion.jTable_GestinoDevoluciones);

            // Añadir columnas al modelo
            model.addColumn("Id_devolucion");
            model.addColumn("IdProducto");
            model.addColumn("Nombre");
            model.addColumn("Cantidad");
            model.addColumn("Motivo");
            model.addColumn("Fecha");

            // Cargar los datos en el modelo
            while (rs.next()) {
                Object fila[] = new Object[6];
                fila[0] = rs.getInt("id_devolucion");
                fila[1] = rs.getInt("idProducto");
                fila[2] = rs.getString("nombre_producto");
                fila[3] = rs.getString("cantidad_devuelta");
                fila[4] = rs.getString("motivo");
                fila[5] = rs.getDate("fecha_devolucion");
                model.addRow(fila);
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar los datos: " + e.getMessage());
        } finally {
            // Cerrar recursos
            try {
                if (rs != null) {
                    rs.close();
                }
                if (st != null) {
                    st.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }

        jTable_GestinoDevoluciones.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_GestinoDevoluciones.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    id_devolucion = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosDevolucionSeleccionada(id_devolucion);
                }
            }
        });
    }

// metodo para mostrar los datos del producto seleccionadp
    private void EnviarDatosDevolucionSeleccionada(int id_devolucion) {

        try {
            // Crear la conexión
            Conexionmysql conexion = new Conexionmysql();
            Connection cn = conexion.getConnection();

            // Preparar la consulta con el parámetro id_devolucion
            PreparedStatement pst = cn.prepareStatement("SELECT * FROM devoluciones WHERE id_devolucion = ?");

            // Asignar el valor del parámetro
            pst.setInt(1, id_devolucion);

            // Ejecutar la consulta
            ResultSet rs = pst.executeQuery();

            // Si se encuentra la devolución, cargar los datos en el campo de texto
            if (rs.next()) {
                txt_cantidadDevuelta.setText(rs.getString("cantidad_devuelta")); 
                txt_motivo.setText(rs.getString("motivo"));                      
                // Obtener la fecha desde la base de datos y establecerla en jDateChooser
                java.sql.Date fechaDevolucionSql = rs.getDate("fecha_devolucion"); 
                if (fechaDevolucionSql != null) {
                    jDateChooser_fecha_devolucion.setDate(new java.util.Date(fechaDevolucionSql.getTime()));
                }
            }

            // Cerrar la conexión
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al seleccionar la devolucion: " + e.getMessage());
        }
    }

}
